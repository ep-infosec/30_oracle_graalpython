diff --git a/lib/matplotlib.egg-info/requires.txt b/lib/matplotlib.egg-info/requires.txt
index 756f584..134f562 100644
--- a/lib/matplotlib.egg-info/requires.txt
+++ b/lib/matplotlib.egg-info/requires.txt
@@ -1,6 +1,6 @@
 certifi>=2020.06.20
 cycler>=0.10
-kiwisolver>=1.0.1
+cassowary>=0.5.2
 numpy>=1.15
 pillow>=6.2.0
 pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3
diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index 340eaeb..7d1dfa8 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -161,7 +161,7 @@ def _check_versions():
     for modname, minver in [
             ("cycler", "0.10"),
             ("dateutil", "2.1"),
-            ("kiwisolver", "1.0.1"),
+            ("cassowary", "0.5.2"),
             ("numpy", "1.15"),
             ("pyparsing", "2.0.1"),
     ]:
diff --git a/lib/matplotlib/_layoutbox.py b/lib/matplotlib/_layoutbox.py
index 0afa2e4..ea81c7e 100644
--- a/lib/matplotlib/_layoutbox.py
+++ b/lib/matplotlib/_layoutbox.py
@@ -16,7 +16,8 @@ other constrains.
 """
 
 import itertools
-import kiwisolver as kiwi
+import cassowary
+from cassowary import SimplexSolver, MEDIUM, STRONG
 import logging
 import numpy as np
 
@@ -45,19 +46,19 @@ def get_renderer(fig):
 
 class LayoutBox:
     """
-    Basic rectangle representation using kiwi solver variables
+    Basic rectangle representation using cassowary solver variables
     """
 
     def __init__(self, parent=None, name='', tightwidth=False,
                  tightheight=False, artist=None,
                  lower_left=(0, 0), upper_right=(1, 1), pos=False,
                  subplot=False, h_pad=None, w_pad=None):
-        Variable = kiwi.Variable
+        Variable = cassowary.Variable
         self.parent = parent
         self.name = name
         sn = self.name + '_'
         if parent is None:
-            self.solver = kiwi.Solver()
+            self.solver = cassowary.SimplexSolver()
             self.constrained_layout_called = 0
         else:
             self.solver = parent.solver
@@ -126,37 +127,38 @@ class LayoutBox:
 
         # left
         if not sol.hasEditVariable(self.left_margin_min):
-            sol.addEditVariable(self.left_margin_min, 'strong')
-            sol.suggestValue(self.left_margin_min, 0.0001)
+            sol.add_edit_variable(self.left_margin_min)
+            with sol.edit():
+                sol.suggest_value(self.left_margin_min, 0.0001)
         c = (self.left_margin == self.left - self.parent.left)
-        self.solver.addConstraint(c | 'required')
+        self.solver.add_constraint(c)
         c = (self.left_margin >= self.left_margin_min)
-        self.solver.addConstraint(c | 'strong')
+        self.solver.add_constraint(c, strength=STRONG)
 
         # right
         if not sol.hasEditVariable(self.right_margin_min):
-            sol.addEditVariable(self.right_margin_min, 'strong')
+            sol.addEditVariable(self.right_margin_min, STRONG)
             sol.suggestValue(self.right_margin_min, 0.0001)
         c = (self.right_margin == self.parent.right - self.right)
-        self.solver.addConstraint(c | 'required')
+        self.solver.add_constraint(c)
         c = (self.right_margin >= self.right_margin_min)
-        self.solver.addConstraint(c | 'required')
+        self.solver.add_constraint(c)
         # bottom
         if not sol.hasEditVariable(self.bottom_margin_min):
-            sol.addEditVariable(self.bottom_margin_min, 'strong')
+            sol.addEditVariable(self.bottom_margin_min, STRONG)
             sol.suggestValue(self.bottom_margin_min, 0.0001)
         c = (self.bottom_margin == self.bottom - self.parent.bottom)
-        self.solver.addConstraint(c | 'required')
+        self.solver.add_constraint(c)
         c = (self.bottom_margin >= self.bottom_margin_min)
-        self.solver.addConstraint(c | 'required')
+        self.solver.add_constraint(c)
         # top
         if not sol.hasEditVariable(self.top_margin_min):
-            sol.addEditVariable(self.top_margin_min, 'strong')
+            sol.addEditVariable(self.top_margin_min, STRONG)
             sol.suggestValue(self.top_margin_min, 0.0001)
         c = (self.top_margin == self.parent.top - self.top)
-        self.solver.addConstraint(c | 'required')
+        self.solver.add_constraint(c)
         c = (self.top_margin >= self.top_margin_min)
-        self.solver.addConstraint(c | 'required')
+        self.solver.add_constraint(c)
 
     def add_child(self, child):
         self.children += [child]
@@ -171,8 +173,9 @@ class LayoutBox:
         sol = self.solver
         # never let width and height go negative.
         for i in [self.min_width, self.min_height]:
-            sol.addEditVariable(i, 1e9)
-            sol.suggestValue(i, 0.0)
+            sol.add_edit_variable(i, 1e9)
+            with sol.edit():
+                sol.suggest_value(i, 0.0)
         # define relation ships between things thing width and right and left
         self.hard_constraints()
         # self.soft_constraints()
@@ -187,7 +190,7 @@ class LayoutBox:
               self.top <= parent.top,
               self.right <= parent.right]
         for c in hc:
-            self.solver.addConstraint(c | 'required')
+            self.solver.add_constraint(c)
 
     def hard_constraints(self):
         hc = [self.width == self.right - self.left,
@@ -197,7 +200,7 @@ class LayoutBox:
               self.width >= self.min_width,
               self.height >= self.min_height]
         for c in hc:
-            self.solver.addConstraint(c | 'required')
+            self.solver.add_constraint(c)
 
     def soft_constraints(self):
         sol = self.solver
@@ -207,35 +210,35 @@ class LayoutBox:
             suggest = 20.
         c = (self.pref_width == suggest)
         for i in c:
-            sol.addConstraint(i | 'required')
+            sol.add_constraint(i)
         if self.tightheight:
             suggest = 0.
         else:
             suggest = 20.
         c = (self.pref_height == suggest)
         for i in c:
-            sol.addConstraint(i | 'required')
+            sol.add_constraint(i)
 
         c = [(self.width >= suggest),
              (self.height >= suggest)]
         for i in c:
-            sol.addConstraint(i | 150000)
+            sol.add_constraint(i, weight=150000)
 
     def set_parent(self, parent):
         """Replace the parent of this with the new parent."""
         self.parent = parent
         self.parent_constrain()
 
-    def constrain_geometry(self, left, bottom, right, top, strength='strong'):
+    def constrain_geometry(self, left, bottom, right, top, strength=cassowary.STRONG):
         hc = [self.left == left,
               self.right == right,
               self.bottom == bottom,
               self.top == top]
         for c in hc:
-            self.solver.addConstraint(c | strength)
+            self.solver.add_constraint(c, strength=strength)
         # self.solver.updateVariables()
 
-    def constrain_same(self, other, strength='strong'):
+    def constrain_same(self, other, strength=STRONG):
         """
         Make the layoutbox have same position as other layoutbox
         """
@@ -244,32 +247,32 @@ class LayoutBox:
               self.bottom == other.bottom,
               self.top == other.top]
         for c in hc:
-            self.solver.addConstraint(c | strength)
+            self.solver.add_constraint(c, strength=strength)
 
-    def constrain_left_margin(self, margin, strength='strong'):
+    def constrain_left_margin(self, margin, strength=STRONG):
         c = (self.left == self.parent.left + margin)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
     def edit_left_margin_min(self, margin):
         self.solver.suggestValue(self.left_margin_min, margin)
 
-    def constrain_right_margin(self, margin, strength='strong'):
+    def constrain_right_margin(self, margin, strength=STRONG):
         c = (self.right == self.parent.right - margin)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
     def edit_right_margin_min(self, margin):
         self.solver.suggestValue(self.right_margin_min, margin)
 
-    def constrain_bottom_margin(self, margin, strength='strong'):
+    def constrain_bottom_margin(self, margin, strength=STRONG):
         c = (self.bottom == self.parent.bottom + margin)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
     def edit_bottom_margin_min(self, margin):
         self.solver.suggestValue(self.bottom_margin_min, margin)
 
-    def constrain_top_margin(self, margin, strength='strong'):
+    def constrain_top_margin(self, margin, strength=STRONG):
         c = (self.top == self.parent.top - margin)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
     def edit_top_margin_min(self, margin):
         self.solver.suggestValue(self.top_margin_min, margin)
@@ -285,7 +288,7 @@ class LayoutBox:
         """
         self.solver.updateVariables()
 
-    def edit_height(self, height, strength='strong'):
+    def edit_height(self, height, strength=STRONG):
         """
         Set the height of the layout box.
 
@@ -298,52 +301,52 @@ class LayoutBox:
                 sol.addEditVariable(i, strength)
         sol.suggestValue(self.height, height)
 
-    def constrain_height(self, height, strength='strong'):
+    def constrain_height(self, height, strength=STRONG):
         """
         Constrain the height of the layout box.  height is
         either a float or a layoutbox.height.
         """
         c = (self.height == height)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
-    def constrain_height_min(self, height, strength='strong'):
+    def constrain_height_min(self, height, strength=STRONG):
         c = (self.height >= height)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
-    def edit_width(self, width, strength='strong'):
+    def edit_width(self, width, strength=STRONG):
         sol = self.solver
         for i in [self.width]:
             if not sol.hasEditVariable(i):
                 sol.addEditVariable(i, strength)
         sol.suggestValue(self.width, width)
 
-    def constrain_width(self, width, strength='strong'):
+    def constrain_width(self, width, strength=STRONG):
         """
         Constrain the width of the layout box.  *width* is
         either a float or a layoutbox.width.
         """
         c = (self.width == width)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
-    def constrain_width_min(self, width, strength='strong'):
+    def constrain_width_min(self, width, strength=STRONG):
         c = (self.width >= width)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
-    def constrain_left(self, left,  strength='strong'):
+    def constrain_left(self, left,  strength=STRONG):
         c = (self.left == left)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
-    def constrain_bottom(self, bottom, strength='strong'):
+    def constrain_bottom(self, bottom, strength=STRONG):
         c = (self.bottom == bottom)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
-    def constrain_right(self, right, strength='strong'):
+    def constrain_right(self, right, strength=STRONG):
         c = (self.right == right)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
-    def constrain_top(self, top, strength='strong'):
+    def constrain_top(self, top, strength=STRONG):
         c = (self.top == top)
-        self.solver.addConstraint(c | strength)
+        self.solver.add_constraint(c, strength=strength)
 
     def _is_subplotspec_layoutbox(self):
         """
@@ -451,7 +454,7 @@ class LayoutBox:
               self.width == parent.width * width,
               self.height == parent.height * height]
         for c in cs:
-            self.solver.addConstraint(c | 'required')
+            self.solver.add_constraint(c)
 
         return lb
 
@@ -464,7 +467,7 @@ class LayoutBox:
 
 
 # Utility functions that act on layoutboxes...
-def hstack(boxes, padding=0, strength='strong'):
+def hstack(boxes, padding=0, strength=STRONG):
     """
     Stack LayoutBox instances from left to right.
     *padding* is in figure-relative units.
@@ -472,34 +475,34 @@ def hstack(boxes, padding=0, strength='strong'):
 
     for i in range(1, len(boxes)):
         c = (boxes[i-1].right + padding <= boxes[i].left)
-        boxes[i].solver.addConstraint(c | strength)
+        boxes[i].solver.add_constraint(c, strength=strength)
 
 
-def hpack(boxes, padding=0, strength='strong'):
+def hpack(boxes, padding=0, strength=STRONG):
     """Stack LayoutBox instances from left to right."""
 
     for i in range(1, len(boxes)):
         c = (boxes[i-1].right + padding == boxes[i].left)
-        boxes[i].solver.addConstraint(c | strength)
+        boxes[i].solver.add_constraint(c, strength=strength)
 
 
-def vstack(boxes, padding=0, strength='strong'):
+def vstack(boxes, padding=0, strength=STRONG):
     """Stack LayoutBox instances from top to bottom."""
 
     for i in range(1, len(boxes)):
         c = (boxes[i-1].bottom - padding >= boxes[i].top)
-        boxes[i].solver.addConstraint(c | strength)
+        boxes[i].solver.add_constraint(c, strength=strength)
 
 
-def vpack(boxes, padding=0, strength='strong'):
+def vpack(boxes, padding=0, strength=STRONG):
     """Stack LayoutBox instances from top to bottom."""
 
     for i in range(1, len(boxes)):
         c = (boxes[i-1].bottom - padding >= boxes[i].top)
-        boxes[i].solver.addConstraint(c | strength)
+        boxes[i].solver.add_constraint(c, strength=strength)
 
 
-def match_heights(boxes, height_ratios=None, strength='medium'):
+def match_heights(boxes, height_ratios=None, strength=MEDIUM):
     """Stack LayoutBox instances from top to bottom."""
 
     if height_ratios is None:
@@ -507,10 +510,10 @@ def match_heights(boxes, height_ratios=None, strength='medium'):
     for i in range(1, len(boxes)):
         c = (boxes[i-1].height ==
              boxes[i].height*height_ratios[i-1]/height_ratios[i])
-        boxes[i].solver.addConstraint(c | strength)
+        boxes[i].solver.add_constraint(c, strength=strength)
 
 
-def match_widths(boxes, width_ratios=None, strength='medium'):
+def match_widths(boxes, width_ratios=None, strength=MEDIUM):
     """Stack LayoutBox instances from top to bottom."""
 
     if width_ratios is None:
@@ -518,7 +521,7 @@ def match_widths(boxes, width_ratios=None, strength='medium'):
     for i in range(1, len(boxes)):
         c = (boxes[i-1].width ==
              boxes[i].width*width_ratios[i-1]/width_ratios[i])
-        boxes[i].solver.addConstraint(c | strength)
+        boxes[i].solver.add_constraint(c, strength=strength)
 
 
 def vstackeq(boxes, padding=0, height_ratios=None):
@@ -531,11 +534,11 @@ def hstackeq(boxes, padding=0, width_ratios=None):
     match_widths(boxes, width_ratios=width_ratios)
 
 
-def align(boxes, attr, strength='strong'):
+def align(boxes, attr, strength=STRONG):
     cons = []
     for box in boxes[1:]:
         cons = (getattr(boxes[0], attr) == getattr(box, attr))
-        boxes[0].solver.addConstraint(cons | strength)
+        boxes[0].solver.add_constraint(cons, strength=strength)
 
 
 def match_top_margins(boxes, levels=1):
@@ -548,7 +551,7 @@ def match_top_margins(boxes, levels=1):
         for n in range(levels):
             topb = topb.parent
         c = (box0.top-top0.top == box.top-topb.top)
-        box0.solver.addConstraint(c | 'strong')
+        box0.solver.add_constraint(c, STRONG)
 
 
 def match_bottom_margins(boxes, levels=1):
@@ -561,7 +564,7 @@ def match_bottom_margins(boxes, levels=1):
         for n in range(levels):
             topb = topb.parent
         c = (box0.bottom-top0.bottom == box.bottom-topb.bottom)
-        box0.solver.addConstraint(c | 'strong')
+        box0.solver.add_constraint(c, STRONG)
 
 
 def match_left_margins(boxes, levels=1):
@@ -574,7 +577,7 @@ def match_left_margins(boxes, levels=1):
         for n in range(levels):
             topb = topb.parent
         c = (box0.left-top0.left == box.left-topb.left)
-        box0.solver.addConstraint(c | 'strong')
+        box0.solver.add_constraint(c, STRONG)
 
 
 def match_right_margins(boxes, levels=1):
@@ -587,7 +590,7 @@ def match_right_margins(boxes, levels=1):
         for n in range(levels):
             topb = topb.parent
         c = (box0.right-top0.right == box.right-topb.right)
-        box0.solver.addConstraint(c | 'strong')
+        box0.solver.add_constraint(c, STRONG)
 
 
 def match_width_margins(boxes, levels=1):
diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py
index 14866cc..8ab2629 100644
--- a/lib/matplotlib/image.py
+++ b/lib/matplotlib/image.py
@@ -1545,7 +1545,7 @@ def imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None,
         # Vector formats that are not handled by PIL.
         if pil_kwargs is not None:
             raise ValueError(
-                f"Cannot use 'pil_kwargs' when saving to {format}")
+                "Cannot use 'pil_kwargs' when saving to {}".format(format))
         fig = Figure(dpi=dpi, frameon=False)
         fig.figimage(arr, cmap=cmap, vmin=vmin, vmax=vmax, origin=origin,
                      resize=True)
@@ -1583,8 +1583,7 @@ def imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None,
                                          "'pnginfo' entry in 'pil_kwargs'.")
             else:
                 metadata = {
-                    "Software": (f"Matplotlib version{mpl.__version__}, "
-                                 f"https://matplotlib.org/"),
+                    "Software": ("Matplotlib version{}, https://matplotlib.org/".format(mpl.__version__)),
                     **(metadata if metadata is not None else {}),
                 }
                 pil_kwargs["pnginfo"] = pnginfo = PIL.PngImagePlugin.PngInfo()
diff --git a/setup.py b/setup.py
index 81eae82..80ee5af 100644
--- a/setup.py
+++ b/setup.py
@@ -289,7 +289,7 @@ setup(  # Finally, pass this all along to distutils to do the heavy lifting.
     install_requires=[
         "certifi>=2020.06.20",
         "cycler>=0.10",
-        "kiwisolver>=1.0.1",
+        "cassowary>=0.5.2",
         "numpy>=1.15",
         "pillow>=6.2.0",
         "pyparsing>=2.0.3,!=2.0.4,!=2.1.2,!=2.1.6",
diff --git a/src/_backend_agg_wrapper.cpp b/src/_backend_agg_wrapper.cpp
index 1377231..f77b95b 100644
--- a/src/_backend_agg_wrapper.cpp
+++ b/src/_backend_agg_wrapper.cpp
@@ -40,7 +40,7 @@ static void PyBufferRegion_dealloc(PyBufferRegion *self)
     Py_TYPE(self)->tp_free((PyObject *)self);
 }
 
-static PyObject *PyBufferRegion_to_string(PyBufferRegion *self, PyObject *args, PyObject *kwds)
+static PyObject *PyBufferRegion_to_string(PyBufferRegion *self)
 {
     return PyBytes_FromStringAndSize((const char *)self->x->get_data(),
                                      self->x->get_height() * self->x->get_stride());
@@ -48,7 +48,7 @@ static PyObject *PyBufferRegion_to_string(PyBufferRegion *self, PyObject *args,
 
 /* TODO: This doesn't seem to be used internally.  Remove? */
 
-static PyObject *PyBufferRegion_set_x(PyBufferRegion *self, PyObject *args, PyObject *kwds)
+static PyObject *PyBufferRegion_set_x(PyBufferRegion *self, PyObject *args)
 {
     int x;
     if (!PyArg_ParseTuple(args, "i:set_x", &x)) {
@@ -59,7 +59,7 @@ static PyObject *PyBufferRegion_set_x(PyBufferRegion *self, PyObject *args, PyOb
     Py_RETURN_NONE;
 }
 
-static PyObject *PyBufferRegion_set_y(PyBufferRegion *self, PyObject *args, PyObject *kwds)
+static PyObject *PyBufferRegion_set_y(PyBufferRegion *self, PyObject *args)
 {
     int y;
     if (!PyArg_ParseTuple(args, "i:set_y", &y)) {
@@ -70,14 +70,14 @@ static PyObject *PyBufferRegion_set_y(PyBufferRegion *self, PyObject *args, PyOb
     Py_RETURN_NONE;
 }
 
-static PyObject *PyBufferRegion_get_extents(PyBufferRegion *self, PyObject *args, PyObject *kwds)
+static PyObject *PyBufferRegion_get_extents(PyBufferRegion *self)
 {
     agg::rect_i rect = self->x->get_rect();
 
     return Py_BuildValue("IIII", rect.x1, rect.y1, rect.x2, rect.y2);
 }
 
-static PyObject *PyBufferRegion_to_string_argb(PyBufferRegion *self, PyObject *args, PyObject *kwds)
+static PyObject *PyBufferRegion_to_string_argb(PyBufferRegion *self)
 {
     PyObject *bufobj;
     uint8_t *buf;
@@ -198,7 +198,7 @@ static void PyRendererAgg_dealloc(PyRendererAgg *self)
     Py_TYPE(self)->tp_free((PyObject *)self);
 }
 
-static PyObject *PyRendererAgg_draw_path(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+static PyObject *PyRendererAgg_draw_path(PyRendererAgg *self, PyObject *args)
 {
     GCAgg gc;
     py::PathIterator path;
@@ -227,7 +227,7 @@ static PyObject *PyRendererAgg_draw_path(PyRendererAgg *self, PyObject *args, Py
     Py_RETURN_NONE;
 }
 
-static PyObject *PyRendererAgg_draw_text_image(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+static PyObject *PyRendererAgg_draw_text_image(PyRendererAgg *self, PyObject *args)
 {
     numpy::array_view<agg::int8u, 2> image;
     double x;
@@ -252,7 +252,7 @@ static PyObject *PyRendererAgg_draw_text_image(PyRendererAgg *self, PyObject *ar
     Py_RETURN_NONE;
 }
 
-PyObject *PyRendererAgg_draw_markers(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+PyObject *PyRendererAgg_draw_markers(PyRendererAgg *self, PyObject *args)
 {
     GCAgg gc;
     py::PathIterator marker_path;
@@ -288,7 +288,7 @@ PyObject *PyRendererAgg_draw_markers(PyRendererAgg *self, PyObject *args, PyObje
     Py_RETURN_NONE;
 }
 
-static PyObject *PyRendererAgg_draw_image(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+static PyObject *PyRendererAgg_draw_image(PyRendererAgg *self, PyObject *args)
 {
     GCAgg gc;
     double x;
@@ -316,7 +316,7 @@ static PyObject *PyRendererAgg_draw_image(PyRendererAgg *self, PyObject *args, P
 }
 
 static PyObject *
-PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args)
 {
     GCAgg gc;
     agg::trans_affine master_transform;
@@ -387,7 +387,7 @@ PyRendererAgg_draw_path_collection(PyRendererAgg *self, PyObject *args, PyObject
     Py_RETURN_NONE;
 }
 
-static PyObject *PyRendererAgg_draw_quad_mesh(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+static PyObject *PyRendererAgg_draw_quad_mesh(PyRendererAgg *self, PyObject *args)
 {
     GCAgg gc;
     agg::trans_affine master_transform;
@@ -439,7 +439,7 @@ static PyObject *PyRendererAgg_draw_quad_mesh(PyRendererAgg *self, PyObject *arg
 }
 
 static PyObject *
-PyRendererAgg_draw_gouraud_triangle(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+PyRendererAgg_draw_gouraud_triangle(PyRendererAgg *self, PyObject *args)
 {
     GCAgg gc;
     numpy::array_view<const double, 2> points;
@@ -480,7 +480,7 @@ PyRendererAgg_draw_gouraud_triangle(PyRendererAgg *self, PyObject *args, PyObjec
 }
 
 static PyObject *
-PyRendererAgg_draw_gouraud_triangles(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+PyRendererAgg_draw_gouraud_triangles(PyRendererAgg *self, PyObject *args)
 {
     GCAgg gc;
     numpy::array_view<const double, 3> points;
@@ -527,7 +527,7 @@ PyRendererAgg_draw_gouraud_triangles(PyRendererAgg *self, PyObject *args, PyObje
 }
 
 static PyObject *
-PyRendererAgg_get_content_extents(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+PyRendererAgg_get_content_extents(PyRendererAgg *self)
 {
     agg::rect_i extents;
 
@@ -561,14 +561,14 @@ int PyRendererAgg_get_buffer(PyRendererAgg *self, Py_buffer *buf, int flags)
     return 1;
 }
 
-static PyObject *PyRendererAgg_clear(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+static PyObject *PyRendererAgg_clear(PyRendererAgg *self)
 {
     CALL_CPP("clear", self->x->clear());
 
     Py_RETURN_NONE;
 }
 
-static PyObject *PyRendererAgg_copy_from_bbox(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+static PyObject *PyRendererAgg_copy_from_bbox(PyRendererAgg *self, PyObject *args)
 {
     agg::rect_d bbox;
     BufferRegion *reg;
@@ -586,7 +586,7 @@ static PyObject *PyRendererAgg_copy_from_bbox(PyRendererAgg *self, PyObject *arg
     return regobj;
 }
 
-static PyObject *PyRendererAgg_restore_region(PyRendererAgg *self, PyObject *args, PyObject *kwds)
+static PyObject *PyRendererAgg_restore_region(PyRendererAgg *self, PyObject *args)
 {
     PyBufferRegion *regobj;
     int xx1 = 0, yy1 = 0, xx2 = 0, yy2 = 0, x = 0, y = 0;
diff --git a/src/_path_wrapper.cpp b/src/_path_wrapper.cpp
index 708d7d3..f4484ac 100644
--- a/src/_path_wrapper.cpp
+++ b/src/_path_wrapper.cpp
@@ -30,7 +30,7 @@ PyObject *convert_polygon_vector(std::vector<Polygon> &polygons)
 
 const char *Py_point_in_path__doc__ = "point_in_path(x, y, radius, path, trans)";
 
-static PyObject *Py_point_in_path(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_point_in_path(PyObject *self, PyObject *args)
 {
     double x, y, r;
     py::PathIterator path;
@@ -60,7 +60,7 @@ static PyObject *Py_point_in_path(PyObject *self, PyObject *args, PyObject *kwds
 
 const char *Py_points_in_path__doc__ = "points_in_path(points, radius, path, trans)";
 
-static PyObject *Py_points_in_path(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_points_in_path(PyObject *self, PyObject *args)
 {
     numpy::array_view<const double, 2> points;
     double r;
@@ -89,7 +89,7 @@ static PyObject *Py_points_in_path(PyObject *self, PyObject *args, PyObject *kwd
 
 const char *Py_point_on_path__doc__ = "point_on_path(x, y, radius, path, trans)";
 
-static PyObject *Py_point_on_path(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_point_on_path(PyObject *self, PyObject *args)
 {
     double x, y, r;
     py::PathIterator path;
@@ -119,7 +119,7 @@ static PyObject *Py_point_on_path(PyObject *self, PyObject *args, PyObject *kwds
 
 const char *Py_points_on_path__doc__ = "points_on_path(points, radius, path, trans)";
 
-static PyObject *Py_points_on_path(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_points_on_path(PyObject *self, PyObject *args)
 {
     numpy::array_view<const double, 2> points;
     double r;
@@ -148,7 +148,7 @@ static PyObject *Py_points_on_path(PyObject *self, PyObject *args, PyObject *kwd
 
 const char *Py_get_path_extents__doc__ = "get_path_extents(path, trans)";
 
-static PyObject *Py_get_path_extents(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_get_path_extents(PyObject *self, PyObject *args)
 {
     py::PathIterator path;
     agg::trans_affine trans;
@@ -176,7 +176,7 @@ static PyObject *Py_get_path_extents(PyObject *self, PyObject *args, PyObject *k
 const char *Py_update_path_extents__doc__ =
     "update_path_extents(path, trans, rect, minpos, ignore)";
 
-static PyObject *Py_update_path_extents(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_update_path_extents(PyObject *self, PyObject *args)
 {
     py::PathIterator path;
     agg::trans_affine trans;
@@ -252,7 +252,7 @@ static PyObject *Py_update_path_extents(PyObject *self, PyObject *args, PyObject
 
 const char *Py_get_path_collection_extents__doc__ = "get_path_collection_extents(";
 
-static PyObject *Py_get_path_collection_extents(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_get_path_collection_extents(PyObject *self, PyObject *args)
 {
     agg::trans_affine master_transform;
     PyObject *pathsobj;
@@ -302,7 +302,7 @@ const char *Py_point_in_path_collection__doc__ =
     "point_in_path_collection(x, y, radius, master_transform, paths, transforms, offsets, "
     "offset_trans, filled, offset_position)";
 
-static PyObject *Py_point_in_path_collection(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_point_in_path_collection(PyObject *self, PyObject *args)
 {
     double x, y, radius;
     agg::trans_affine master_transform;
@@ -367,7 +367,7 @@ static PyObject *Py_point_in_path_collection(PyObject *self, PyObject *args, PyO
 
 const char *Py_path_in_path__doc__ = "path_in_path(path_a, trans_a, path_b, trans_b)";
 
-static PyObject *Py_path_in_path(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_path_in_path(PyObject *self, PyObject *args)
 {
     py::PathIterator a;
     agg::trans_affine atrans;
@@ -399,7 +399,7 @@ static PyObject *Py_path_in_path(PyObject *self, PyObject *args, PyObject *kwds)
 
 const char *Py_clip_path_to_rect__doc__ = "clip_path_to_rect(path, rect, inside)";
 
-static PyObject *Py_clip_path_to_rect(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_clip_path_to_rect(PyObject *self, PyObject *args)
 {
     py::PathIterator path;
     agg::rect_d rect;
@@ -424,7 +424,7 @@ static PyObject *Py_clip_path_to_rect(PyObject *self, PyObject *args, PyObject *
 
 const char *Py_affine_transform__doc__ = "affine_transform(points, trans)";
 
-static PyObject *Py_affine_transform(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_affine_transform(PyObject *self, PyObject *args)
 {
     PyObject *vertices_obj;
     agg::trans_affine trans;
@@ -461,7 +461,7 @@ static PyObject *Py_affine_transform(PyObject *self, PyObject *args, PyObject *k
 
 const char *Py_count_bboxes_overlapping_bbox__doc__ = "count_bboxes_overlapping_bbox(bbox, bboxes)";
 
-static PyObject *Py_count_bboxes_overlapping_bbox(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_count_bboxes_overlapping_bbox(PyObject *self, PyObject *args)
 {
     agg::rect_d bbox;
     numpy::array_view<const double, 3> bboxes;
@@ -595,7 +595,7 @@ const char *Py_cleanup_path__doc__ =
     "cleanup_path(path, trans, remove_nans, clip_rect, snap_mode, stroke_width, simplify, "
     "return_curves, sketch)";
 
-static PyObject *Py_cleanup_path(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_cleanup_path(PyObject *self, PyObject *args)
 {
     py::PathIterator path;
     agg::trans_affine trans;
@@ -675,7 +675,7 @@ static PyObject *Py_cleanup_path(PyObject *self, PyObject *args, PyObject *kwds)
 const char *Py_convert_to_string__doc__ = "convert_to_string(path, trans, "
     "clip_rect, simplify, sketch, precision, codes, postfix)";
 
-static PyObject *Py_convert_to_string(PyObject *self, PyObject *args, PyObject *kwds)
+static PyObject *Py_convert_to_string(PyObject *self, PyObject *args)
 {
     py::PathIterator path;
     agg::trans_affine trans;
diff --git a/src/ft2font_wrapper.cpp b/src/ft2font_wrapper.cpp
index ba361ac..ab2321c 100644
--- a/src/ft2font_wrapper.cpp
+++ b/src/ft2font_wrapper.cpp
@@ -523,7 +523,7 @@ const char *PyFT2Font_clear__doc__ =
     "\n"
     "Clear all the glyphs, reset for a new set_text";
 
-static PyObject *PyFT2Font_clear(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_clear(PyFT2Font *self)
 {
     CALL_CPP("clear", (self->x->clear()));
 
@@ -535,7 +535,7 @@ const char *PyFT2Font_set_size__doc__ =
     "\n"
     "Set the point size and dpi of the text.\n";
 
-static PyObject *PyFT2Font_set_size(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_set_size(PyFT2Font *self, PyObject *args)
 {
     double ptsize;
     double dpi;
@@ -554,7 +554,7 @@ const char *PyFT2Font_set_charmap__doc__ =
     "\n"
     "Make the i-th charmap current\n";
 
-static PyObject *PyFT2Font_set_charmap(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_set_charmap(PyFT2Font *self, PyObject *args)
 {
     int i;
 
@@ -572,7 +572,7 @@ const char *PyFT2Font_select_charmap__doc__ =
     "\n"
     "select charmap i where i is one of the FT_Encoding number\n";
 
-static PyObject *PyFT2Font_select_charmap(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_select_charmap(PyFT2Font *self, PyObject *args)
 {
     unsigned long i;
 
@@ -594,7 +594,7 @@ const char *PyFT2Font_get_kerning__doc__ =
     "  KERNING_UNFITTED - Return scaled but un-grid-fitted kerning distances\n"
     "  KERNING_UNSCALED - Return the kerning vector in original font units\n";
 
-static PyObject *PyFT2Font_get_kerning(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_kerning(PyFT2Font *self, PyObject *args)
 {
     FT_UInt left, right, mode;
     int result;
@@ -673,7 +673,7 @@ const char *PyFT2Font_get_num_glyphs__doc__ =
     "\n"
     "Return the number of loaded glyphs\n";
 
-static PyObject *PyFT2Font_get_num_glyphs(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_num_glyphs(PyFT2Font *self)
 {
     return PyLong_FromLong(self->x->get_num_glyphs());
 }
@@ -761,7 +761,7 @@ const char *PyFT2Font_get_width_height__doc__ =
     "The rotation of the string is accounted for.  To get width and height\n"
     "in pixels, divide these values by 64\n";
 
-static PyObject *PyFT2Font_get_width_height(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_width_height(PyFT2Font *self)
 {
     long width, height;
 
@@ -776,7 +776,7 @@ const char *PyFT2Font_get_bitmap_offset__doc__ =
     "Get the offset in 26.6 subpixels for the bitmap if ink hangs left or below (0, 0).\n"
     "Since matplotlib only supports left-to-right text, y is always 0.\n";
 
-static PyObject *PyFT2Font_get_bitmap_offset(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_bitmap_offset(PyFT2Font *self)
 {
     long x, y;
 
@@ -792,7 +792,7 @@ const char *PyFT2Font_get_descent__doc__ =
     "The rotation of the string is accounted for.  To get the descent\n"
     "in pixels, divide this value by 64.\n";
 
-static PyObject *PyFT2Font_get_descent(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_descent(PyFT2Font *self)
 {
     long descent;
 
@@ -893,7 +893,7 @@ const char *PyFT2Font_get_glyph_name__doc__ =
     "names (per FT_FACE_FLAG_GLYPH_NAMES), this returns a made-up name which \n"
     "does *not* roundtrip through `.get_name_index`.\n";
 
-static PyObject *PyFT2Font_get_glyph_name(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_glyph_name(PyFT2Font *self, PyObject *args)
 {
     unsigned int glyph_number;
     char buffer[128];
@@ -910,7 +910,7 @@ const char *PyFT2Font_get_charmap__doc__ =
     "Returns a dictionary that maps the character codes of the selected charmap\n"
     "(Unicode by default) to their corresponding glyph indices.\n";
 
-static PyObject *PyFT2Font_get_charmap(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_charmap(PyFT2Font *self)
 {
     PyObject *charmap;
     if (!(charmap = PyDict_New())) {
@@ -940,7 +940,7 @@ const char *PyFT2Font_get_char_index__doc__ =
     "\n"
     "Given a character code, returns a glyph index.\n";
 
-static PyObject *PyFT2Font_get_char_index(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_char_index(PyFT2Font *self, PyObject *args)
 {
     FT_UInt index;
     FT_ULong ccode;
@@ -962,7 +962,7 @@ const char *PyFT2Font_get_sfnt__doc__ =
     "key is the platform-ID, ISO-encoding-scheme, language-code, and "
     "description.\n";
 
-static PyObject *PyFT2Font_get_sfnt(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_sfnt(PyFT2Font *self)
 {
     PyObject *names;
 
@@ -1022,7 +1022,7 @@ const char *PyFT2Font_get_name_index__doc__ =
     "Returns the glyph index of a given glyph name.\n"
     "The glyph index 0 means `undefined character code'.\n";
 
-static PyObject *PyFT2Font_get_name_index(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_name_index(PyFT2Font *self, PyObject *args)
 {
     char *glyphname;
     long name_index;
@@ -1038,7 +1038,7 @@ const char *PyFT2Font_get_ps_font_info__doc__ =
     "\n"
     "Return the information in the PS Font Info structure.\n";
 
-static PyObject *PyFT2Font_get_ps_font_info(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_ps_font_info(PyFT2Font *self)
 {
     PS_FontInfoRec fontinfo;
 
@@ -1066,7 +1066,7 @@ const char *PyFT2Font_get_sfnt_table__doc__ =
     "Return one of the following SFNT tables: head, maxp, OS/2, hhea, "
     "vhea, post, or pclt.\n";
 
-static PyObject *PyFT2Font_get_sfnt_table(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_sfnt_table(PyFT2Font *self, PyObject *args)
 {
     char *tagname;
     if (!PyArg_ParseTuple(args, "s:get_sfnt_table", &tagname)) {
@@ -1368,7 +1368,7 @@ const char *PyFT2Font_get_path__doc__ =
     "Get the path data from the currently loaded glyph as a tuple of vertices, "
     "codes.\n";
 
-static PyObject *PyFT2Font_get_path(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_path(PyFT2Font *self)
 {
     int count;
 
@@ -1390,7 +1390,7 @@ const char *PyFT2Font_get_image__doc__ =
     "\n"
     "Returns the underlying image buffer for this font object.\n";
 
-static PyObject *PyFT2Font_get_image(PyFT2Font *self, PyObject *args, PyObject *kwds)
+static PyObject *PyFT2Font_get_image(PyFT2Font *self)
 {
     FT2Image &im = self->x->get_image();
     npy_intp dims[] = {(npy_intp)im.get_height(), (npy_intp)im.get_width() };
